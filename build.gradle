plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.sonarqube' version "3.3"
    id 'jacoco'
    id 'java'
}

compileJava.options.encoding = 'UTF-8'

// =============================== Commons App Config =====================================
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

bootRun {
    sourceResources sourceSets.main
}

dependencies {

    /* Spring Boot */
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.6.8'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas:2.7.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.7.0'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.7.0'

//    developmentOnly 'org.springframework.boot:spring-boot-devtools:2.6.8'
//    implementation 'org.springframework.kafka:spring-kafka:2.8.6'

    /* Feign */
    implementation "com.playtika.reactivefeign:feign-reactor-core:3.2.1"
    implementation "com.playtika.reactivefeign:feign-reactor-spring-configuration:3.2.1"
    implementation "com.playtika.reactivefeign:feign-reactor-webclient:3.2.1"

    /* Spring Cloud */
//    implementation('org.springframework.cloud:spring-cloud-context:3.1.3')
//    implementation 'org.springframework.cloud:spring-cloud-starter-aws-messaging:2.2.6.RELEASE'
    
    /* Security */
//    implementation 'org.springframework.boot:spring-boot-starter-security:2.6.8'
//    implementation 'org.springframework.security:spring-security-web:5.6.4'
    implementation 'com.auth0:java-jwt:3.19.2'

    /* AWS */
    implementation 'com.amazonaws:aws-java-sdk:1.12.237'

    /* Database */
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive:2.7.0'

    /* Docs*/
    implementation('org.springdoc:springdoc-openapi-ui:1.6.9')

    /* Code Gen */
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    /* Utils */
    implementation 'commons-lang:commons-lang:20030203.000129'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    /* Testing */
//    testImplementation 'org.springframework.security:spring-security-test:5.6.4'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'io.projectreactor:reactor-test:3.4.18'
    testImplementation 'com.github.javafaker:javafaker:1.0.2'
    testImplementation 'org.mockito:mockito-inline:4.5.1'
}

// ========================== Jacoco and Sonarqube config ================================

// Getting Jacoco Test Report executable
def allTestCoverageFile = "${rootProject.buildDir}/jacoco/allTestCoverage.exec" as Object
task jacocoMerge(type: JacocoMerge, group: 'verification') {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/test.exec')
}


//Sonar Config
sonarqube {
    properties {
        property "sonar.projectKey", "EddieSCJ_starwars-api-java2"
        property "sonar.organization", "eddiescj-go"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.qualitygate.wait", true
        property "sonar.jacoco.reportPaths", allTestCoverageFile
    }
}

// ================================ Tests ================================
// Configuration to jacoco produce xml
jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    environment "AUTHORIZATION_SECRET", "TazvE@QSs7AfWTMfEwXaR#TB7P6&p@JQ5RqCMqZ%cL5MU\$2qPZyEDkTZH^#cuUW3nbRrTJy^+Hj5wWdNVg?-QypDRMyfE5pCwR#F%bh%73q#F^m*B?@PS"
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// ============================== Build Optimization ==============================
tasks.register('copyFiles', Copy) {
    into(layout.buildDirectory.dir('output'))
    from(configurations.compileClasspath)
    doFirst {
        println ">> Compilation deps: ${configurations.compileClasspath.files}"
    }
}

tasks.withType(Test).configureEach {
    forkEvery = 100
    reports.html.required = false
    reports.junitXml.required = false
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}